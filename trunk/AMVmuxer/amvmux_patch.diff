Index: ffmpeg/libavcodec/Makefile
===================================================================
--- ffmpeg/libavcodec/Makefile	(revision 10636)
+++ ffmpeg/libavcodec/Makefile	(working copy)
@@ -275,6 +275,7 @@
 OBJS-$(CONFIG_ADPCM_IMA_SMJPEG_ENCODER) += adpcm.o
 OBJS-$(CONFIG_ADPCM_IMA_WAV_DECODER)   += adpcm.o
 OBJS-$(CONFIG_ADPCM_IMA_WAV_ENCODER)   += adpcm.o
+OBJS-$(CONFIG_ADPCM_IMA_AMV_ENCODER)   += adpcm.o
 OBJS-$(CONFIG_ADPCM_IMA_WS_DECODER)    += adpcm.o
 OBJS-$(CONFIG_ADPCM_IMA_WS_ENCODER)    += adpcm.o
 OBJS-$(CONFIG_ADPCM_MS_DECODER)        += adpcm.o
Index: ffmpeg/libavcodec/mjpegenc.c
===================================================================
--- ffmpeg/libavcodec/mjpegenc.c	(revision 10636)
+++ ffmpeg/libavcodec/mjpegenc.c	(working copy)
@@ -200,6 +200,7 @@
 
     put_marker(&s->pb, SOI);
 
+    return; // hack for AMV mjpeg format
     jpeg_put_comments(s);
 
     jpeg_table_header(s);
Index: ffmpeg/libavcodec/allcodecs.c
===================================================================
--- ffmpeg/libavcodec/allcodecs.c	(revision 10636)
+++ ffmpeg/libavcodec/allcodecs.c	(working copy)
@@ -247,7 +247,7 @@
     REGISTER_ENCDEC  (ADPCM_CT, adpcm_ct);
     REGISTER_ENCDEC  (ADPCM_EA, adpcm_ea);
     REGISTER_ENCDEC  (ADPCM_G726, adpcm_g726);
-    REGISTER_DECODER (ADPCM_IMA_AMV, adpcm_ima_amv);
+    REGISTER_ENCDEC  (ADPCM_IMA_AMV, adpcm_ima_amv);
     REGISTER_ENCDEC  (ADPCM_IMA_DK3, adpcm_ima_dk3);
     REGISTER_ENCDEC  (ADPCM_IMA_DK4, adpcm_ima_dk4);
     REGISTER_ENCDEC  (ADPCM_IMA_QT, adpcm_ima_qt);
Index: ffmpeg/libavcodec/adpcm.c
===================================================================
--- ffmpeg/libavcodec/adpcm.c	(revision 10636)
+++ ffmpeg/libavcodec/adpcm.c	(working copy)
@@ -185,6 +185,13 @@
         }
         avctx->frame_size = 512 * (avctx->sample_rate / 11025);
         break;
+    case CODEC_ID_ADPCM_IMA_AMV:
+        //avctx->frame_size = (BLKSIZE - 4 * avctx->channels) * 8 / (4 * avctx->channels) + 1; /* each 16 bits sample gives one nibble */
+                                                             /* and we have 4 bytes per channel overhead */
+        avctx->frame_size = 1378;   // 1378...
+        avctx->block_align = 2; // 1394 = correct total audio block size
+        /* seems frame_size isn't taken into account... have to buffer the samples :-( */
+        break;        
     default:
         return -1;
         break;
@@ -297,7 +304,7 @@
     nodes[0]->step = c->step_index;
     nodes[0]->sample1 = c->sample1;
     nodes[0]->sample2 = c->sample2;
-    if((version == CODEC_ID_ADPCM_IMA_WAV) || (version == CODEC_ID_ADPCM_SWF))
+    if((version == CODEC_ID_ADPCM_IMA_WAV) || (version == CODEC_ID_ADPCM_SWF) || (version == CODEC_ID_ADPCM_IMA_AMV))
         nodes[0]->sample1 = c->prev_sample;
     if(version == CODEC_ID_ADPCM_MS)
         nodes[0]->step = c->idelta;
@@ -368,7 +375,7 @@
                     next_##NAME:;
                     STORE_NODE(ms, FFMAX(16, (AdaptationTable[nibble] * step) >> 8));
                 }
-            } else if((version == CODEC_ID_ADPCM_IMA_WAV)|| (version == CODEC_ID_ADPCM_SWF)) {
+            } else if((version == CODEC_ID_ADPCM_IMA_WAV)|| (version == CODEC_ID_ADPCM_SWF) || (version == CODEC_ID_ADPCM_IMA_AMV)) {
 #define LOOP_NODES(NAME, STEP_TABLE, STEP_INDEX)\
                 const int predictor = nodes[j]->sample1;\
                 const int div = (sample - predictor) * 4 / STEP_TABLE;\
@@ -446,6 +453,37 @@
     switch(avctx->codec->id) {
     case CODEC_ID_ADPCM_IMA_QT: /* XXX: can't test until we get .mov writer */
         break;
+    case CODEC_ID_ADPCM_IMA_AMV: 
+        {
+        int i;
+
+            c->status[0].prev_sample = (signed short)samples[0]; /* XXX */
+/*            c->status[0].step_index = 0; *//* XXX: not sure how to init the state machine */
+            bytestream_put_le16(&dst, c->status[0].prev_sample);
+            *dst++ = (unsigned char)c->status[0].step_index;
+            *dst++ = 0; /* unknown */
+            samples++;
+            if (avctx->channels == 2) {
+                c->status[1].prev_sample = (signed short)samples[1];
+/*                c->status[1].step_index = 0; */
+                bytestream_put_le16(&dst, c->status[1].prev_sample);
+                *dst++ = (unsigned char)c->status[1].step_index;
+                *dst++ = 0;
+                samples++;
+            }
+            bytestream_put_le32(&dst, avctx->frame_size);
+
+        n = avctx->frame_size / 2;
+            for (i=0; i<n; i++) {
+                *dst = adpcm_ima_compress_sample(&c->status[0], samples[0]) & 0x0F;
+                *dst |= (adpcm_ima_compress_sample(&c->status[0], samples[1]) << 4) & 0xF0;
+                dst++;
+                samples+=2;
+            }
+            if (avctx->frame_size & 1)
+                *dst++ = adpcm_ima_compress_sample(&c->status[0], *samples++) & 0x0F;  // this fixes the clicking for 
+        break;
+        }
     case CODEC_ID_ADPCM_IMA_WAV:
         n = avctx->frame_size / 8;
             c->status[0].prev_sample = (signed short)samples[0]; /* XXX */
Index: ffmpeg/libavformat/riff.c
===================================================================
--- ffmpeg/libavformat/riff.c	(revision 10636)
+++ ffmpeg/libavformat/riff.c	(working copy)
@@ -188,6 +188,7 @@
     { CODEC_ID_PCM_MULAW, 0x07 },
     { CODEC_ID_ADPCM_MS, 0x02 },
     { CODEC_ID_ADPCM_IMA_WAV, 0x11 },
+    { CODEC_ID_ADPCM_IMA_AMV, 0x01 },
     { CODEC_ID_ADPCM_YAMAHA, 0x20 },
     { CODEC_ID_ADPCM_G726, 0x45 },
     { CODEC_ID_ADPCM_IMA_DK4, 0x61 },  /* rogue format number */
Index: ffmpeg/libavformat/Makefile
===================================================================
--- ffmpeg/libavformat/Makefile	(revision 10636)
+++ ffmpeg/libavformat/Makefile	(working copy)
@@ -19,6 +19,7 @@
 OBJS-$(CONFIG_AIFF_MUXER)                += aiff.o riff.o
 OBJS-$(CONFIG_AMR_DEMUXER)               += amr.o
 OBJS-$(CONFIG_AMR_MUXER)                 += amr.o
+OBJS-$(CONFIG_AMV_MUXER)                 += amvenc.o
 OBJS-$(CONFIG_APC_DEMUXER)               += apc.o
 OBJS-$(CONFIG_APE_DEMUXER)               += ape.o
 OBJS-$(CONFIG_ASF_DEMUXER)               += asf.o riff.o
Index: ffmpeg/libavformat/allformats.c
===================================================================
--- ffmpeg/libavformat/allformats.c	(revision 10636)
+++ ffmpeg/libavformat/allformats.c	(working copy)
@@ -57,6 +57,7 @@
     REGISTER_MUXER    (ADTS, adts);
     REGISTER_MUXDEMUX (AIFF, aiff);
     REGISTER_MUXDEMUX (AMR, amr);
+    REGISTER_MUXER    (AMV, amv);
     REGISTER_DEMUXER  (APC, apc);
     REGISTER_DEMUXER  (APE, ape);
     REGISTER_MUXDEMUX (ASF, asf);
